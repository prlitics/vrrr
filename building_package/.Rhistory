#Check if given a state that is in the list of available state YAMLs
if(tolower(states) %in% state_list){
#If so, yay!
} else {
#too many states
stop("Your state input is either not a state in our library or is not in a recognized format.")
}
state_key <- c("alabama"="alabama", "alaska"="alaska", "arizona"="arizona", "arkansas"="arkansas",
"california"="california", "colorado"="colorado", "connecticut"="connecticut",
"delaware"="delaware", "florida"="florida", "georgia"="georgia", "hawaii"="hawaii",
"idaho"="idaho", "illinois"="illinois", "indiana"="indiana", "iowa"="iowa",
"kansas"="kansas", "kentucky"="kentucky", "louisiana"="louisiana", "maine"="maine",
"maryland"="maryland", "massachusetts"="massachusetts", "michigan"="michigan",
"minnesota"="minnesota", "mississippi"="mississippi","missouri"="missouri",
"montana"="montana","nebraska"="nebraska","nevada"="nevada","new hampshire"="newhampshire",
"newhampshire"= "newhampshire", "new jersey"="newjersey", "newjersey"="newjersey",
"new mexico"="newmexico", "newmexico"="newmexico", "new york"="newyork",
"newyork"="newyork", "north carolina"="northcarolina","northcarolina"="northcarolina",
"north dakota"="northdakota", "northdakota"="north dakota","ohio"="ohio",
"pennsylvania"="pennsylvania", "rhode island"="rhode island", "rhodeisland"="rhode island",
"south carolina"="southcarolina", "southcarolina"="south carolina",
"south dakota"="southdakota", "southdakota"="southdakota", "tennessee"="tennessee",
"texas"="texas", "utah"="utah", "vermont"="vermont", "virginia"="virginia",
"washington"="washington", "west virginia"="westvirginia", "westvirginia"="westvirginia",
"wisconsin"="wisconsin", "wyoming"="wyoming", "al"="alabama", "ak"="alaska",
"az"="arizona", "ar"="arkansas", "ca"="california", "co"="colorado", "ct"="connecticut",
"de"="delaware", "fl"="florida", "ga"="georgia", "hi"="hawaii", "id"="idaho", "il"="illinois",
"in"="indiana", "ia"="iowa","ks"="kansas", "ky"="kentucky","la"="louisiana","me"="maine",
"md"="maryland","ma"="massachusetts","mi"="michigan","mn"="minnesota","ms"="mississippi",
"mo"="missouri","mt"="montana","ne"="nebraska","nv"="nevada","nh"="newhampshire","nj"="newjersey",
"nm"="newmexico","ny"="newyork", "nc"="northcarolina","nd"="northdakota", "oh"="ohio",
"ok"="oklahoma","or"="oregon","pa"="pennsylvania","ri"="rhodeisland","sc"="southcarolina",
"sd"="southdakota","tn"="tennessee","tx"="texas","ut"="utah","vt"="vermont","va"="virginia",
"wa"="washington","wv"="westvirginia", "wi"="wisconsin","wy"="wyoming")
check_yaml <- function(state){
source("C:/Users/prlic/Documents/GitHub/vrrr/building_package/helpful_lists.R")
# check if given a character vector
if (typeof(state)=='character'){
if (tolower(state) %in% names(state_key)){
# continue
current_dir <- getwd()
setwd('C:/Users/prlic/Dropbox/YAML/yaml standardization/yaml files/finished yaml')
# paste .yaml on the backend of it
state_yaml <- paste0(state_key[tolower(state)],".yaml")
# this corrects "fl" or "FlOrIdA" to "florida" and makes it "florida.yaml"
# access a list of all YAMLs in our repo
# check if this state is in it/exists
if(file.exists(state_yaml)){
called_yaml<- yaml:: yaml.load_file(state_yaml)
setwd(current_dir)
}
}else{
stop("Documentation on this state does not exist in your current instance of vrr")
}
}
else{
stop("Please insert a character string with your state's name")
}
return(called_yaml)
}
check_state<-function(states){
# Check if given a character vector
if (typeof(states)=="character"){
num_states<-length(states)
if(num_states == 1){
#Check if given a state that is in the list of available state YAMLs
if(tolower(states) %in% state_list){
#If so, yay!
} else {
#too many states
stop("Your state input is either not a state in our library or is not in a recognized format.")
}
} else if(num_states > 1){
stop("vrr_read can only read-in one state at a time.")
} else {
stop("Please enter at least one state or state postal abbreviation.")
}
} else{
stop("Please insert a character list of at least one state or state postal abbreviation.")
}
}
vrrr_read <- function(path=getwd(), state, vtr_file, standard_columns = T, recode_vals = T) {
source("C:/Users/prlic/Documents/GitHub/vrrr/building_package/helpful_lists.R")
check_state(states = state)
state_yaml<-check_yaml(state=state)
load_state(state, vtr_file = vtr_file, state_yaml = state_yaml)
}
library(yaml)
library(rlang)
library(readr)
load_state<-function(state, vtr_file, state_yaml){
yaml <- state_yaml
# Gather Column Types
cols<-yaml["column_classes"][[1]]
col_names<-names(cols)
x<-""
z<-0
for (i in cols) {
z<- z + 1
if(z==1){
x<-(paste0('list(',shQuote(col_names[z])," = col_",i[[1]],'(), '))
}else if (z < length(cols)){
x<-paste0(x,shQuote(col_names[z])," = col_",i[[1]],'(), ')}
else{
x <-paste0(x,shQuote(col_names[z])," = col_",i[[1]],'() ',')')
}
}
# Gather Delimiter
delim <- yaml[["delimiter"]]
y<-parse_expr(x)
print(names(y))
#Load it in (need to complicate it from here, but it'll be fine for )
readr::read_delim(file = vtr_file, delim = delim, col_names = T, col_types = eval(y))
}
ak<-vrrr_read(state = "ak", vtr_file = "C:/Users/prlic/Downloads/VOTERS List Report 9.25.19.csv")
View(ak)
rm(ak)
ak<-vrrr_read(state = "ak", vtr_file = "C:/Users/prlic/Downloads/VOTERS List Report 9.25.19.csv")
View(ak)
ak<-vrrr_read(state = "ak", vtr_file = "C:/Users/prlic/Downloads/VOTERS List Report 9.25.19.csv")
